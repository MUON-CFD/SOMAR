c*******************************************************************************
c  SOMAR - Stratified Ocean Model with Adaptive Refinement
c  Developed by Ed Santilli & Alberto Scotti
c  Copyright (C) 2014 University of North Carolina at Chapel Hill
c
c  This library is free software; you can redistribute it and/or
c  modify it under the terms of the GNU Lesser General Public
c  License as published by the Free Software Foundation; either
c  version 2.1 of the License, or (at your option) any later version.
c
c  This library is distributed in the hope that it will be useful,
c  but WITHOUT ANY WARRANTY; without even the implied warranty of
c  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
c  Lesser General Public License for more details.
c
c  You should have received a copy of the GNU Lesser General Public
c  License along with this library; if not, write to the Free Software
c  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
c  USA
c
c  For up-to-date contact information, please visit the repository homepage,
c  https://github.com/somarhub.
c*******************************************************************************#include "CONSTANTS.H"


c ----------------------------------------------------------------
c FILL_PHYSCOOR
c ----------------------------------------------------------------
      subroutine CARTESIAN_FILL_PHYSCOOR (
     &      CHF_FRA1[dest],
     &      CHF_CONST_INT[mu],
     &      CHF_CONST_REAL[dXi],
     &      CHF_BOX[destBox],
     &      CHF_CONST_INT[destBoxType])

      ! Declare variables
      integer CHF_AUTODECL[i]
      REAL_T offset

      offset = (one - destBoxType) * half

      ! TODO: This can be made much simpler with CHF_DSELECT
      if (mu.eq.0) then
#if CH_SPACEDIM > 2
        do i2=CHF_LBOUND[destBox; 2], CHF_UBOUND[destBox; 2]
#endif
          do i1=CHF_LBOUND[destBox; 1], CHF_UBOUND[destBox; 1]
            do i0=CHF_LBOUND[destBox; 0], CHF_UBOUND[destBox; 0]
              dest(CHF_AUTOIX[i]) = dXi * (DBLE(i0) + offset);
            enddo
          enddo
#if CH_SPACEDIM > 2
        enddo
#endif
      else
        if (mu.eq.1) then
#if CH_SPACEDIM > 2
          do i2=CHF_LBOUND[destBox; 2], CHF_UBOUND[destBox; 2]
#endif
            do i1=CHF_LBOUND[destBox; 1], CHF_UBOUND[destBox; 1]
              do i0=CHF_LBOUND[destBox; 0], CHF_UBOUND[destBox; 0]
                dest(CHF_AUTOIX[i]) = dXi * (DBLE(i1) + offset);
              enddo
            enddo
#if CH_SPACEDIM > 2
          enddo
        else
          do i2=CHF_LBOUND[destBox; 2], CHF_UBOUND[destBox; 2]
            do i1=CHF_LBOUND[destBox; 1], CHF_UBOUND[destBox; 1]
              do i0=CHF_LBOUND[destBox; 0], CHF_UBOUND[destBox; 0]
                dest(CHF_AUTOIX[i]) = dXi * (DBLE(i2) + offset);
              enddo
            enddo
          enddo
#endif
        endif
      endif

      return
      end


c ----------------------------------------------------------------
c FILL_PHYSCOOR_ALL_COMPS
c ----------------------------------------------------------------
      subroutine CARTESIAN_FILL_PHYSCOOR_ALL_COMPS (
     &      CHF_FRA[dest],
     &      CHF_CONST_REALVECT[dXi],
     &      CHF_BOX[destBox],
     &      CHF_CONST_INTVECT[destBoxType])

      ! Declare variables
      integer CHF_AUTODECL[i]
      REAL_T CHF_AUTODECL[val]
      REAL_T offset(0:CH_SPACEDIM-1)

      CHF_DTERM[
      offset(0) = (one - destBoxType(0)) * half;
      offset(1) = (one - destBoxType(1)) * half;
      offset(2) = (one - destBoxType(2)) * half]

#if CH_SPACEDIM > 2
      do i2=CHF_LBOUND[destBox; 2], CHF_UBOUND[destBox; 2]
        val2 = dXi(2) * (DBLE(i2) + offset(2))
#endif
        do i1=CHF_LBOUND[destBox; 1], CHF_UBOUND[destBox; 1]
          val1 = dXi(1) * (DBLE(i1) + offset(1))
          do i0=CHF_LBOUND[destBox; 0], CHF_UBOUND[destBox; 0]
            CHF_DTERM[
            dest(CHF_AUTOIX[i],0) = dXi(0) * (DBLE(i0) + offset(0));
            dest(CHF_AUTOIX[i],1) = val1;
            dest(CHF_AUTOIX[i],2) = val2]
          enddo
        enddo
#if CH_SPACEDIM > 2
      enddo
#endif

      return
      end

