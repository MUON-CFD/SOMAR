c*******************************************************************************
c  SOMAR - Stratified Ocean Model with Adaptive Refinement
c  Developed by Ed Santilli & Alberto Scotti
c  Copyright (C) 2024 Thomas Jefferson University and Arizona State University
c
c  This library is free software; you can redistribute it and/or
c  modify it under the terms of the GNU Lesser General Public
c  License as published by the Free Software Foundation; either
c  version 2.1 of the License, or (at your option) any later version.
c
c  This library is distributed in the hope that it will be useful,
c  but WITHOUT ANY WARRANTY; without even the implied warranty of
c  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
c  Lesser General Public License for more details.
c
c  You should have received a copy of the GNU Lesser General Public
c  License along with this library; if not, write to the Free Software
c  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
c  USA
c
c  For up-to-date contact information, please visit the repository homepage,
c  https://github.com/MUON-CFD/somar.
c*******************************************************************************


#if CH_SPACEDIM == 2
c ----------------------------------------------------------------
c DEFAULT_FILL_J_2D
c xn is x(Xi) face-centered in the nth dir.
c ----------------------------------------------------------------
      subroutine DEFAULT_FILL_J_2D (
     &      CHF_FRA1[J],
     &      CHF_CONST_FRA[x0],
     &      CHF_CONST_FRA[x1],
     &      CHF_BOX[destBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii0]
      integer CHF_AUTODECL[ii1]
      REAL_T xXi, xNu
      REAL_T yXi, yNu

      CHF_AUTOID[ii0;0]
      CHF_AUTOID[ii1;1]

      CHF_AUTOMULTIDO[destBox;i]
        xXi = x0(CHF_OFFSETIX[i;+ii0],0) - x0(CHF_AUTOIX[i],0)
        yXi = x0(CHF_OFFSETIX[i;+ii0],1) - x0(CHF_AUTOIX[i],1)

        xNu = x1(CHF_OFFSETIX[i;+ii1],0) - x1(CHF_AUTOIX[i],0)
        yNu = x1(CHF_OFFSETIX[i;+ii1],1) - x1(CHF_AUTOIX[i],1)

        J(CHF_AUTOIX[i]) = xXi * yNu - xNu * yXi
      CHF_ENDDO

      return
      end


#elif CH_SPACEDIM == 3
c ----------------------------------------------------------------
c DEFAULT_FILL_J_3D
c xn is x(Xi) face-centered in the nth dir.
c ----------------------------------------------------------------
      subroutine DEFAULT_FILL_J_3D (
     &      CHF_FRA1[J],
     &      CHF_CONST_FRA[x0],
     &      CHF_CONST_FRA[x1],
     &      CHF_CONST_FRA[x2],
     &      CHF_BOX[destBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii0]
      integer CHF_AUTODECL[ii1]
      integer CHF_AUTODECL[ii2]
      REAL_T xXi, xNu, xZeta
      REAL_T yXi, yNu, yZeta
      REAL_T zXi, zNu, zZeta

      CHF_AUTOID[ii0;0]
      CHF_AUTOID[ii1;1]
      CHF_AUTOID[ii2;2]

      CHF_AUTOMULTIDO[destBox;i]
        xXi = x0(CHF_OFFSETIX[i;+ii0],0) - x0(CHF_AUTOIX[i],0)
        yXi = x0(CHF_OFFSETIX[i;+ii0],1) - x0(CHF_AUTOIX[i],1)
        zXi = x0(CHF_OFFSETIX[i;+ii0],2) - x0(CHF_AUTOIX[i],2)

        xNu = x1(CHF_OFFSETIX[i;+ii1],0) - x1(CHF_AUTOIX[i],0)
        yNu = x1(CHF_OFFSETIX[i;+ii1],1) - x1(CHF_AUTOIX[i],1)
        zNu = x1(CHF_OFFSETIX[i;+ii1],2) - x1(CHF_AUTOIX[i],2)

        xZeta = x2(CHF_OFFSETIX[i;+ii2],0) - x2(CHF_AUTOIX[i],0)
        yZeta = x2(CHF_OFFSETIX[i;+ii2],1) - x2(CHF_AUTOIX[i],1)
        zZeta = x2(CHF_OFFSETIX[i;+ii2],2) - x2(CHF_AUTOIX[i],2)

        J(CHF_AUTOIX[i]) = xXi * (yNu * zZeta - yZeta * zNu)
     &                   + xNu * (yZeta * zXi - yXi * zZeta)
     &                   + xZeta * (yXi * zNu - yNu * zXi)
      CHF_ENDDO

      return
      end

#else
#  error Bad SPACEDIM
#endif

